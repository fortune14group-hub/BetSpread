import React,{useEffect,useRef} from 'react'; import { Bet, profitForBet } from '../lib'; import { Chart, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, Legend, Tooltip } from 'chart.js'; Chart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, Legend, Tooltip); export default function Charts({bets}:{bets:Bet[]}){const lineRef=useRef<HTMLCanvasElement>(null), barRef=useRef<HTMLCanvasElement>(null); useEffect(()=>{const settled=bets.filter(b=>b.resultat!=='PENDING'); const sorted=settled.slice().sort((a,b)=>a.matchdag.localeCompare(b.matchdag)); let cum=0; const lineData=sorted.map(b=>{cum+=profitForBet(b); return {x:b.matchdag,y:cum}}); const byMonth:Record<string,number>={}; sorted.forEach(b=>{const m=b.matchdag.slice(0,7); byMonth[m]=(byMonth[m]||0)+profitForBet(b)}); const barLabels=Object.keys(byMonth).sort(); const barData=barLabels.map(k=>byMonth[k]); const line=new Chart(lineRef.current!,{type:'line',data:{labels:lineData.map(d=>d.x),datasets:[{label:'Cumulative Profit (u)',data:lineData.map(d=>d.y)}]},options:{responsive:true,plugins:{legend:{labels:{color:'#ddd'}},tooltip:{}},scales:{x:{ticks:{color:'#aaa'}},y:{ticks:{color:'#aaa'}}}}}); const bar=new Chart(barRef.current!,{type:'bar',data:{labels:barLabels,datasets:[{label:'Monthly Profit (u)',data:barData}]},options:{responsive:true,plugins:{legend:{labels:{color:'#ddd'}},tooltip:{}},scales:{x:{ticks:{color:'#aaa'}},y:{ticks:{color:'#aaa'}}}}}); return()=>{line.destroy(); bar.destroy();}},[bets]); return(<div className="grid md:grid-cols-2 gap-4"><div className="card"><canvas ref={lineRef}/></div><div className="card"><canvas ref={barRef}/></div></div>)}