import React,{useEffect,useMemo,useState} from 'react'; import BetForm from '../components/BetForm'; import BetTable from '../components/BetTable'; import Charts from '../components/Charts'; import Auth from './Auth'; import Paywall from './Paywall'; import { Bet, load, save, returnsForBet } from '../lib'; import { supabase } from '../supabaseClient'; type Tab='home'|'add'|'paywall'|'auth'; export default function App(){const [store,setStore]=useState(load()); const [tab,setTab]=useState<Tab>('home'); const [monthFilter,setMonthFilter]=useState<string>('all'); const [sessionEmail,setSessionEmail]=useState<string|undefined>(undefined); const FREE_LIMIT=20; useEffect(()=>{if(!supabase) return; supabase.auth.getUser().then(({data})=>setSessionEmail(data.user?.email||undefined)); const { data:sub }=supabase.auth.onAuthStateChange((_e,sess)=>setSessionEmail(sess?.user?.email||undefined)); return()=>sub.subscription.unsubscribe()},[]); useEffect(()=>{(async()=>{if(!supabase||!sessionEmail) return; const { data:{ user } }=await supabase.auth.getUser(); if(!user) return; const { data, error }=await supabase.from('bets').select('*').eq('user_id',user.id).order('matchdag',{ascending:true}); if(!error && data){ const merged=mergeLocalWithRemote(store.bets,data as any[]); const next={bets:merged}; setStore(next); save(next) }})()},[sessionEmail]); function mergeLocalWithRemote(local:Bet[],remote:Bet[]){const map=new Map<string,Bet>(); [...remote,...local].forEach(b=>map.set(b.id,b)); return Array.from(map.values())} async function pushBetToCloud(bet:Bet){if(!supabase||!sessionEmail) return; const { data:{ user } }=await supabase.auth.getUser(); if(!user) return; await supabase.from('bets').upsert({ ...bet, user_id:user.id })} function addBet(f:{utskick:string,matchdag:string,match:string,market:string,odds:number,unitsize:number}){const over=store.bets.length>=FREE_LIMIT && !sessionEmail; if(over){setTab('paywall'); return} const bet:Bet={id:crypto.randomUUID(),bookmaker:'Bet365',resultat:'PENDING',...f}; const next={bets:[...store.bets,bet]}; setStore(next); save(next); pushBetToCloud(bet); window.scrollTo({top:0,behavior:'smooth'})} function setResult(id:string,r:Bet['resultat']){const next={bets:store.bets.map(b=>b.id===id?{...b,resultat:r}:b)}; setStore(next); save(next); const changed=next.bets.find(b=>b.id===id); if(changed) pushBetToCloud(changed)} const filtered=useMemo(()=>monthFilter==='all'?store.bets:store.bets.filter(b=>b.matchdag.startsWith(monthFilter)),[store.bets,monthFilter]); const kpis=useMemo(()=>{const settled=filtered.filter(b=>b.resultat!=='PENDING'); const stake=settled.filter(b=>b.resultat!=='VOID').reduce((s,b)=>s+b.unitsize,0); const returns=settled.reduce((s,b)=>s+returnsForBet(b),0); const profit=returns-stake; const wins=settled.filter(b=>b.resultat==='SITTER').length; const total=settled.filter(b=>b.resultat==='SITTER'||b.resultat==='SITTER_EJ').length; const roi=stake?profit/stake:0; const winrate=total?wins/total:0; const months=Array.from(new Set(store.bets.map(b=>b.matchdag.slice(0,7)))).sort(); return { stake, returns, profit, roi, winrate, months }},[filtered,store.bets]); if(tab==='auth') return(<><Header {...{monthFilter,setMonthFilter,sessionEmail,setTab}}/><Auth/></>); if(tab==='paywall') return(<><Header {...{monthFilter,setMonthFilter,sessionEmail,setTab}}/><Paywall/></>); return(<><Header {...{monthFilter,setMonthFilter,sessionEmail,setTab}}/><main className="container-14 space-y-6 mt-6"><section className="grid md:grid-cols-4 gap-4"><div className="card"><div className="kpi">Stake</div><div className="kpi-val">{kpis.stake.toFixed(2)} u</div></div><div className="card"><div className="kpi">Returns</div><div className="kpi-val">{kpis.returns.toFixed(2)} u</div></div><div className="card"><div className="kpi">Profit</div><div className="kpi-val">{(kpis.returns-kpis.stake).toFixed(2)} u</div></div><div className="card"><div className="kpi">ROI</div><div className="kpi-val">{(kpis.roi*100).toFixed(1)}%</div></div><div className="card md:col-span-4"><div className="kpi">Winrate</div><div className="kpi-val">{(kpis.winrate*100).toFixed(1)}%</div></div></section><section className="card"><div className="flex items-center justify-between"><h2 className="text-lg font-bold">Lägg till spel</h2>{!sessionEmail?<button className="btn-outline" onClick={()=>setTab('auth')}>Logga in</button>:<span className="text-neutral-400 text-sm">Inloggad</span>}</div><BetForm onSubmit={addBet}/></section><Charts bets={filtered}/><div className="flex items-center justify-between"><h2 className="text-lg font-bold">Dina spel</h2><div className="flex gap-2"><select value={monthFilter} onChange={e=>setMonthFilter(e.target.value)}><option value="all">Alla månader</option>{kpis.months.map(m=><option key={m} value={m}>{m}</option>)}</select><a className="btn-ghost" href="#" onClick={(e)=>{e.preventDefault(); const a=document.createElement('a'); a.href=URL.createObjectURL(new Blob([JSON.stringify(store)],{type:'application/json'})); a.download='backup.json'; a.click();}}>Backup JSON</a></div></div><BetTable bets={filtered} onSet={setResult}/><footer className="text-neutral-500 text-sm text-center py-8">© BetSpread — Data lagras lokalt och kan synkas till molnet när du loggar in.</footer></main></>)} function Header({monthFilter,setMonthFilter,sessionEmail,setTab}:{monthFilter:string,setMonthFilter:(v:string)=>void,sessionEmail?:string,setTab:(t:Tab)=>void}){return(<div className="header-14"><div className="container-14"><div className="brand-14"><div className="brand-logo"></div><div className="brand-title">BetSpread</div><div className="ml-auto flex gap-2"><select className="hidden md:block" value={monthFilter} onChange={e=>setMonthFilter(e.target.value)}><option value="all">Alla månader</option></select>{!sessionEmail?(<button className="btn-outline" onClick={()=>setTab('auth')}>Logga in</button>):(<button className="btn-outline" onClick={async()=>{if(!supabase)return; await supabase.auth.signOut(); setTab('home')}}>Logga ut</button>)}<button className="btn" onClick={()=>setTab('paywall')}>Premium</button></div></div></div></div>)}